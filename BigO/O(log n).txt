O(log n)" เป็นการระบุประสิทธิภาพของอัลกอริทึมหรือการประมวลผลข้อมูลที่มีการเพิ่มขึ้นเมื่อขนาดข้อมูล (n) เพิ่มขึ้น
โดยอัลกอริทึมที่มี O(log n) จะทำงานอย่างมีประสิทธิภาพและเร็วขึ้นเมื่อขนาดข้อมูลเพิ่มขึ้นโดยไม่เพิ่มการทำงานอย่างเชื่องช้า

-Code----------------------------------------------

public class BinarySearch {
    // ค้นหาค่าในอาร์เรย์เรียงลำดับ
    public static int binarySearch(int[] arr, int target) {
        int left = 0;            // กำหนดดัชนีด้านซ้ายของช่วงค้นหาเริ่มต้น
        int right = arr.length - 1;  // กำหนดดัชนีด้านขวาของช่วงค้นหาเริ่มต้น
        
        while (left <= right) {   // ใช้วงวน while เพื่อค้นหาตราบใดที่ยังมีช่วงค้นหาที่ไม่เป็นศูนย์
            int mid = left + (right - left) / 2; // คำนวณดัชนีกลางของช่วงค้นหา
            
            if (arr[mid] == target) {    // ถ้าค่ากลางเท่ากับค่าเป้าหมาย
                return mid; // ค้นเจอค่าเป้าหมาย
            } else if (arr[mid] < target) {  // ถ้าค่ากลางน้อยกว่าค่าเป้าหมาย
                left = mid + 1; // ปรับดัชนีด้านซ้ายเป็นดัชนีกลาง + 1
            } else {  // ถ้าค่ากลางมากกว่าค่าเป้าหมาย
                right = mid - 1; // ปรับดัชนีด้านขวาเป็นดัชนีกลาง - 1
            }
        }
        
        return -1; // ไม่พบค่าเป้าหมาย
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int target = 7;

        int result = binarySearch(arr, target);

        if (result != -1) {
            System.out.println("ค่า " + target + " ถูกค้นเจอที่ดัชนี " + result);
        } else {
            System.out.println("ไม่พบค่า " + target);
        }
    }
}
